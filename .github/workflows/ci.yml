name: GUILD App - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd testing && npm ci
        
    - name: Run ESLint
      run: npx eslint src backend/src --format json --output-file eslint-report.json
      continue-on-error: true
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run unit tests with coverage
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run dependency check
      run: npx npm-check-updates --errorLevel 2
      continue-on-error: true
      
    - name: Start backend for integration tests
      run: |
        cd backend
        npm run build
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        
    - name: Run integration tests
      run: cd testing && npm test
      
    - name: Run deployment readiness check
      run: cd testing && node scripts/deployment-readiness.js run
      
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.node-version }}
        path: |
          coverage/
          testing/reports/
          eslint-report.json
          
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run mutation testing
      run: npx stryker run
      
    - name: Upload mutation report
      uses: actions/upload-artifact@v3
      with:
        name: mutation-report
        path: reports/mutation/
        
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Download test reports
      uses: actions/download-artifact@v3
      with:
        name: test-reports-20.x
        
    - name: Check quality thresholds
      run: |
        # Check coverage threshold (80%)
        COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% below threshold 80%"
          exit 1
        fi
        
        # Check if deployment readiness passed
        if [ ! -f "testing/reports/DEPLOYMENT_READINESS_$(date +%Y-%m-%d).json" ]; then
          echo "❌ Deployment readiness report not found"
          exit 1
        fi
        
        DEPLOY_STATUS=$(cat testing/reports/DEPLOYMENT_READINESS_*.json | jq -r '.deploymentReadiness.status')
        if [ "$DEPLOY_STATUS" != "DEPLOYMENT READY" ]; then
          echo "❌ Deployment readiness check failed: $DEPLOY_STATUS"
          exit 1
        fi
        
        echo "✅ All quality gates passed"
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging environment
      run: echo "🚀 Deploying to staging..."
      # Add your deployment steps here
      
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate, mutation-testing]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production environment
      run: echo "🚀 Deploying to production..."
      # Add your deployment steps here
