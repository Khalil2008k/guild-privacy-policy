rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthed() {
      return request.auth != null;
    }
    
    // Helper function to check if user is participant in chat
    function isParticipant(chatId) {
      return isAuthed() 
        && exists(/databases/$(database)/documents/chats/$(chatId))
        && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
    }
    
    // Users collection - authenticated users can read any user, write their own
    match /users/{userId} {
      allow read: if isAuthed();
      allow write: if isAuthed() && request.auth.uid == userId;
    }
    
    // Presence collection - authenticated users can read/write their own presence
    match /presence/{userId} {
      allow read: if isAuthed();
      allow write: if isAuthed() && request.auth.uid == userId;
    }
    
    // Chats collection - participants can read/write
    match /chats/{chatId} {
      allow read, write: if isParticipant(chatId);
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isParticipant(chatId);
      }
    }
    
    // Notifications collection - users can read/write their own notifications
    match /notifications/{notificationId} {
      allow read, write: if isAuthed() && request.auth.uid == resource.data.userId;
    }
    
    // User notifications subcollection
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if isAuthed() && request.auth.uid == userId;
    }
    
    // Jobs collection - authenticated users can read, admins can write
    match /jobs/{jobId} {
      allow read: if isAuthed();
      allow write: if isAuthed() && request.auth.uid == resource.data.posterId;
    }
    
    // Guilds collection - authenticated users can read, owners can write
    match /guilds/{guildId} {
      allow read: if isAuthed();
      allow write: if isAuthed() && request.auth.uid == resource.data.ownerId;
    }
    
    // Wallets collection - users can read/write their own wallet
    match /wallets/{userId} {
      allow read, write: if isAuthed() && request.auth.uid == userId;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
