
// External Secrets Operator for Vault Integration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: guild-production
spec:
  provider:
    vault:
      server: "https://vault.guild.com:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "guild-platform"
          serviceAccountRef:
            name: "external-secrets-sa"
            namespace: "external-secrets-system"

---
# Cluster Secret Store for Shared Secrets
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-cluster
spec:
  provider:
    vault:
      server: "https://vault.guild.com:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "guild-platform-cluster"
          serviceAccountRef:
            name: "external-secrets-cluster-sa"
            namespace: "external-secrets-system"

---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: guild-db-secret
  namespace: guild-production
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: guild-db-secret
    creationPolicy: Owner
  data:
  - secretKey: database-url
    remoteRef:
      key: database/guild
      property: url
  - secretKey: redis-url
    remoteRef:
      key: database/guild
      property: redis_url
  - secretKey: api-key
    remoteRef:
      key: api/guild
      property: key

---
# External Secret for Firebase Config
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: guild-firebase-secret
  namespace: guild-production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: guild-firebase-secret
    creationPolicy: Owner
  data:
  - secretKey: project-id
    remoteRef:
      key: firebase/guild
      property: project_id
  - secretKey: private-key
    remoteRef:
      key: firebase/guild
      property: private_key
  - secretKey: client-email
    remoteRef:
      key: firebase/guild
      property: client_email

---
# External Secret for Payment Gateway
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: guild-payment-secret
  namespace: guild-production
spec:
  refreshInterval: 30m
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: guild-payment-secret
    creationPolicy: Owner
  data:
  - secretKey: stripe-secret-key
    remoteRef:
      key: payment/stripe
      property: secret_key
  - secretKey: paypal-client-id
    remoteRef:
      key: payment/paypal
      property: client_id
  - secretKey: paypal-client-secret
    remoteRef:
      key: payment/paypal
      property: client_secret

---
# Push Secret for Container Registry
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: guild-registry-secret
  namespace: guild-production
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-cluster
    kind: ClusterSecretStore
  target:
    name: guild-registry-secret
    creationPolicy: Owner
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: |
          {
            "auths": {
              "gcr.io": {
                "auth": "{{ .registry_auth }}"
              },
              "registry.hub.docker.com": {
                "auth": "{{ .dockerhub_auth }}"
              }
            }
          }
  data:
  - secretKey: registry_auth
    remoteRef:
      key: registry/gcr
      property: auth
  - secretKey: dockerhub_auth
    remoteRef:
      key: registry/dockerhub
      property: auth

---
# Secret Rotation Policy
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend-rotating
  namespace: guild-production
spec:
  provider:
    vault:
      server: "https://vault.guild.com:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "guild-platform-rotating"
          serviceAccountRef:
            name: "external-secrets-rotating-sa"
            namespace: "external-secrets-system"
  refreshInterval: 24h

---
# Vault Policy for External Secrets
# This would be applied to Vault
vault_policy = {
  path "secret/data/database/guild" {
    capabilities = ["read"]
  }
  path "secret/data/api/guild" {
    capabilities = ["read"]
  }
  path "secret/data/firebase/guild" {
    capabilities = ["read"]
  }
  path "secret/data/payment/*" {
    capabilities = ["read"]
  }
  path "secret/data/registry/*" {
    capabilities = ["read"]
  }
}

# Kubernetes Service Account for External Secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: guild-production
  annotations:
    iam.gke.io/gcp-service-account: external-secrets@guild-production.iam.gserviceaccount.com

---
# Cluster Role for External Secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "secretstores", "clustersecretstores"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-controller
subjects:
- kind: ServiceAccount
  name: external-secrets-controller
  namespace: external-secrets-system
