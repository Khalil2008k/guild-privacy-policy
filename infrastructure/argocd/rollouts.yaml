
// Argo Rollouts Progressive Deployment Configuration
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: guild-api-rollout
  namespace: guild-production
  labels:
    app: guild-api
spec:
  replicas: 10
  strategy:
    canary:
      stableService: guild-api-stable
      canaryService: guild-api-canary
      trafficRouting:
        istio:
          virtualService:
            name: guild-api-vs
            routes:
            - primary
      steps:
      - setWeight: 20
      - pause:
          duration: 600 # 10 minutes
      - setWeight: 50
      - pause:
          duration: 600 # 10 minutes
      - setWeight: 80
      - pause:
          duration: 600 # 10 minutes
      - setWeight: 100
      analysis:
        templates:
        - templateName: success-rate
        args:
        - name: success-rate
          value: "99.5"
        startingStep: 2 # Run analysis from step 2
  selector:
    matchLabels:
      app: guild-api
  template:
    metadata:
      labels:
        app: guild-api
    spec:
      containers:
      - name: guild-api
        image: gcr.io/guild-production/guild-api:{{ .Values.image.tag }}
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        env:
        - name: NODE_ENV
          value: production
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: guild-db-secret
              key: database-url
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
  minReadySeconds: 30

---
# Analysis Template for Success Rate
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
  namespace: guild-production
spec:
  args:
  - name: success-rate
  metrics:
  - name: success-rate
    interval: 60s
    count: 5
    successCondition: result > 99.5
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(rate(http_requests_total{job="guild-api",status=~"2.."}[5m])) /
          sum(rate(http_requests_total{job="guild-api"}[5m])) * 100

---
# Analysis Template for Error Rate
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: error-rate
  namespace: guild-production
spec:
  args:
  - name: error-rate
  metrics:
  - name: error-rate
    interval: 60s
    count: 5
    successCondition: result < 0.5
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(rate(http_requests_total{job="guild-api",status=~"5.."}[5m])) /
          sum(rate(http_requests_total{job="guild-api"}[5m])) * 100

---
# Rollout Analysis
apiVersion: argoproj.io/v1alpha1
kind: AnalysisRun
metadata:
  name: guild-api-analysis
  namespace: guild-production
spec:
  arguments:
  - name: success-rate
    value: "99.5"
  - name: error-rate
    value: "0.5"
  templates:
  - templateName: success-rate
  - templateName: error-rate

---
# Blue-Green Deployment Strategy
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: guild-api-blue-green
  namespace: guild-production
spec:
  replicas: 10
  strategy:
    blueGreen:
      activeService: guild-api-active
      previewService: guild-api-preview
      autoPromotionEnabled: false
      scaleDownDelaySeconds: 300
      previewReplicaCount: 3
      postPromotionAnalysis:
        templates:
        - templateName: success-rate
        args:
        - name: success-rate
          value: "99.9"
  selector:
    matchLabels:
      app: guild-api
  template:
    metadata:
      labels:
        app: guild-api
    spec:
      containers:
      - name: guild-api
        image: gcr.io/guild-production/guild-api:{{ .Values.image.tag }}
        ports:
        - containerPort: 8080

---
# Canary Analysis Configuration
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: canary-analysis
  namespace: guild-production
spec:
  args:
  - name: prometheus-url
    value: http://prometheus.monitoring.svc.cluster.local:9090
  metrics:
  - name: error-rate
    interval: 30s
    count: 10
    successCondition: result < 1.0
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(rate(http_requests_total{job="guild-api",status=~"5.."}[5m])) /
          sum(rate(http_requests_total{job="guild-api"}[5m])) * 100

  - name: latency-p95
    interval: 30s
    count: 10
    successCondition: result < 500
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="guild-api"}[5m])) by (le))

  - name: throughput
    interval: 30s
    count: 10
    successCondition: result > 100
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(rate(http_requests_total{job="guild-api"}[5m]))
