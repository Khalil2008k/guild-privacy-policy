
// GitLab CI/CD Pipeline for Guild Platform
stages:
  - validate
  - test
  - build
  - deploy
  - monitor

variables:
  NODE_VERSION: "18"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  KUBECONFIG: /builds/guild-platform/.kube/config

# Cache configuration for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/
    - backend/node_modules/
    - backend/.npm/

# Template for jobs
.job_template: &job_template
  image: node:${NODE_VERSION}
  before_script:
    - npm ci --cache .npm --prefer-offline
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - .npm/

# Validation Stage
validate:lint:
  <<: *job_template
  stage: validate
  script:
    - npm run lint
    - npm run type-check
    - npm run security:audit
  only:
    - merge_requests
    - main
    - develop

validate:dependencies:
  <<: *job_template
  stage: validate
  script:
    - npm run depcheck
    - npm audit --audit-level moderate
  only:
    - merge_requests
    - main

# Test Stage
test:unit:
  <<: *job_template
  stage: test
  script:
    - npm run test:ci
  coverage: '/All files\s+\|\s+([\d\.]+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit: test-results/junit.xml
    paths:
      - coverage/
      - test-results/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

test:e2e:
  <<: *job_template
  stage: test
  image: cypress/included:13.6.0
  script:
    - npm run test:e2e:ci
  artifacts:
    paths:
      - cypress/videos/
      - cypress/screenshots/
    expire_in: 1 week
    when: always
  only:
    - merge_requests
    - main

test:load:
  stage: test
  image: justb4/jmeter:latest
  script:
    - npm run test:load
  artifacts:
    paths:
      - testing/load/jmeter-results/
    expire_in: 1 week
    when: always
  only:
    - main
    - schedules

test:security:
  stage: test
  image: owasp/zap2docker-stable:latest
  script:
    - npm run test:security
  artifacts:
    paths:
      - testing/security/reports/
    expire_in: 1 week
    when: always
  only:
    - main
    - schedules

# Build Stage
build:backend:
  <<: *job_template
  stage: build
  script:
    - cd backend
    - npm run build
    - npm run build:docker
  artifacts:
    paths:
      - backend/dist/
      - backend/Dockerfile
    expire_in: 1 hour
  only:
    - merge_requests
    - main

build:frontend:
  <<: *job_template
  stage: build
  script:
    - npm run build
    - npm run build:docker
  artifacts:
    paths:
      - build/
      - Dockerfile
    expire_in: 1 hour
  only:
    - merge_requests
    - main

# Deploy Stage
deploy:staging:
  stage: deploy
  image: google/cloud-sdk:alpine
  script:
    - echo $GCP_SERVICE_ACCOUNT_KEY > /tmp/key.json
    - gcloud auth activate-service-account --key-file=/tmp/key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud container clusters get-credentials guild-staging --region us-central1
    - helm upgrade --install guild-staging helm/guild-platform --namespace staging --wait
  environment:
    name: staging
    url: https://staging.guild.com
  only:
    - develop
  when: manual

deploy:production:
  stage: deploy
  image: google/cloud-sdk:alpine
  script:
    - echo $GCP_SERVICE_ACCOUNT_KEY > /tmp/key.json
    - gcloud auth activate-service-account --key-file=/tmp/key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud container clusters get-credentials guild-production --region us-central1
    - helm upgrade --install guild-production helm/guild-platform --namespace production --wait
  environment:
    name: production
    url: https://app.guild.com
  only:
    - main
  when: manual

# Monitor Stage
monitor:health:
  stage: monitor
  image: curlimages/curl:latest
  script:
    - curl -f https://app.guild.com/health || exit 1
    - curl -f https://admin.guild.com/health || exit 1
    - curl -f https://api.guild.com/health || exit 1
  only:
    - main

monitor:performance:
  stage: monitor
  image: google/cloud-sdk:alpine
  script:
    - echo $GCP_SERVICE_ACCOUNT_KEY > /tmp/key.json
    - gcloud auth activate-service-account --key-file=/tmp/key.json
    - gcloud monitoring metrics list --filter='metric.type="loadbalancing.googleapis.com/https/request_count"'
  only:
    - main
  when: manual

# Cleanup Stage
cleanup:cache:
  stage: .post
  script:
    - echo "Cleaning up cache and temporary files..."
    - rm -rf node_modules/.cache
    - rm -rf .npm/_cacache
  when: always

# Notification
notify:slack:
  stage: .post
  image: curlimages/curl:latest
  script:
    - |
      if [ "$CI_JOB_STATUS" == "success" ]; then
        MESSAGE="✅ Pipeline succeeded for $CI_COMMIT_REF_NAME"
      else
        MESSAGE="❌ Pipeline failed for $CI_COMMIT_REF_NAME"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{"text":"$MESSAGE\nBranch: $CI_COMMIT_REF_NAME\nPipeline: $CI_PIPELINE_URL"}" \
        $SLACK_WEBHOOK_URL
  only:
    - main
    - develop
  when: always
